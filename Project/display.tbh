declare sub modbus_init()
declare sub home_screen()
declare sub lcd_scan()
declare sub lcd_poll()
declare sub change_column_name()
declare sub reset_sensors()
declare sub set_sensor_id(id as byte)
declare sub set_sensor_id(id as byte)
declare sub set_sensor_type(stype as byte)
declare sub set_sensor_data(data as string)
declare sub max_sensors_screen()
declare sub get_sensor_type(id as byte)
declare sub get_monitor_version(id as byte)
declare sub get_firmware_version(id as byte)
declare sub get_sensor_data(id as byte, stype as byte)
declare sub set_id_screen()
declare sub change_id()
declare sub scanning_sensors_screen()
declare sub update_scanning_sensors_screen(percent as word)
declare sub update_firmware_upload_screen(currentpack as word, totalpacks as word)
declare sub upload_firmware_screen()
declare sub firmware_upload_screen()
declare sub monitor_upload_screen()
declare sub firmware_upload_in_prog_screen()
declare sub upload_successful_screen()
declare sub scan_successful_screen()
declare sub reprogram_address(oldaddr as byte, newaddr as byte)
declare sub do_xmodem_upload(filename as string)
declare sub set_LED(pattern as byte)
declare sub led_scanning_sensors()
declare sub led_firmware_uploading()
declare sub upload_failed_screen()
declare sub clear_line(position as word)
declare sub clear_screen()
declare sub unknown_sensor_screen()
declare sub please_wait_screen()
declare sub lcd_show_firmware()
declare sub clear_data_screen()
declare sub delay_ms(ms as dword)
declare function scan_sensors(id as byte) as boolean
declare function get_accelerometer_values(b as byte) as string
declare function convert_accelerometer_values(value as string) as string

const PAT_ONE_SHORT_GREEN=			"---------------G~"
const PAT_TWO_SHORT_GREEN=			"-------------G-G~"
const PAT_THREE_SHORT_GREEN=		"-----------G-G-G"
const PAT_THREE_SHORT_BOTH=			"--B-B-B--"
const PAT_GREEN_ON=					"G~"
const PAT_LONG_RED=					"RRRRRRRR-~"